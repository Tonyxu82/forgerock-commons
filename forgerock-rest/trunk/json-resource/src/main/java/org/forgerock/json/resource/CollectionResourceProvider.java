/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]".
 *
 * Copyright Â© 2012 ForgeRock AS. All rights reserved.
 */

package org.forgerock.json.resource;

import org.forgerock.json.fluent.JsonValue;

/**
 * An implementation interface for resource providers which exposes a collection
 * of resource instances. The resource collection supports the following
 * operations:
 * <ul>
 * <li>action
 * <li>query
 * </ul>
 * Whereas resource instances within the collection support the following
 * operations:
 * <ul>
 * <li>action
 * <li>create - with an optional client provided resource ID
 * <li>delete
 * <li>patch
 * <li>read
 * <li>update
 * </ul>
 */
public interface CollectionResourceProvider {

    /**
     * Performs the provided
     * {@link ResourceProvider#action(Context, ActionRequest, ResultHandler)
     * action} against the resource collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The action request. The resource ID will be {@code null}.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#action(Context, ActionRequest, ResultHandler)
     */
    void actionCollection(Context context, ActionRequest request, ResultHandler<JsonValue> handler);

    /**
     * Performs the provided
     * {@link ResourceProvider#action(Context, ActionRequest, ResultHandler)
     * action} against a resource within the collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The action request. The resource ID will be non-{@code null}
     *            and identify the target resource instance.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#action(Context, ActionRequest, ResultHandler)
     */
    void actionInstance(Context context, ActionRequest request, ResultHandler<JsonValue> handler);

    /**
     * {@link ResourceProvider#create(Context, CreateRequest, ResultHandler)
     * Adds} a new resource instance to the collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The create request. The resource ID will be {@code null} if
     *            the ID is to be generated by the resource provider, otherwise
     *            it will specify the resource ID which should be used to
     *            identify the newly created resource.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#create(Context, CreateRequest, ResultHandler)
     */
    void createInstance(Context context, CreateRequest request, ResultHandler<JsonValue> handler);

    /**
     * {@link ResourceProvider#delete(Context, DeleteRequest, ResultHandler)
     * Removes} a resource instance from the collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The delete request. The resource ID will be non-{@code null}
     *            and identify the target resource instance.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#delete(Context, DeleteRequest, ResultHandler)
     */
    void deleteInstance(Context context, DeleteRequest request, ResultHandler<JsonValue> handler);

    /**
     * {@link ResourceProvider#patch(Context, PatchRequest, ResultHandler)
     * Patches} an existing resource within the collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The patch request. The resource ID will be non-{@code null}
     *            and identify the target resource instance.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#patch(Context, PatchRequest, ResultHandler)
     */
    void patchInstance(Context context, PatchRequest request, ResultHandler<Resource> handler);

    /**
     * {@link ResourceProvider#query(Context, QueryRequest, QueryResultHandler)
     * Searches} the collection for all resources which match the query request
     * criteria.
     *
     * @param context
     *            The request context.
     * @param request
     *            The query request. The resource ID will be {@code null}.
     * @param handler
     *            The query result handler to be notified on completion.
     * @see ResourceProvider#query(Context, QueryRequest, QueryResultHandler)
     */
    void queryCollection(Context context, QueryRequest request, QueryResultHandler handler);

    /**
     * {@link ResourceProvider#read(Context, ReadRequest, ResultHandler) Reads}
     * an existing resource within the collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The read request. The resource ID will be non-{@code null} and
     *            identify the target resource instance.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#read(Context, ReadRequest, ResultHandler)
     */
    void readInstance(Context context, ReadRequest request, ResultHandler<Resource> handler);

    /**
     * {@link ResourceProvider#update(Context, UpdateRequest, ResultHandler)
     * Updates} an existing resource within the collection.
     *
     * @param context
     *            The request context.
     * @param request
     *            The update request. The resource ID will be non-{@code null}
     *            and identify the target resource instance.
     * @param handler
     *            The result handler to be notified on completion.
     * @see ResourceProvider#update(Context, UpdateRequest, ResultHandler)
     */
    void updateInstance(Context context, UpdateRequest request, ResultHandler<Resource> handler);

}
