*** Settings ***
# Robot Framework Libraries needed by keywords defined bellow
Library  Collections

# ForgeRock Python Libraries offers some other keywords
Library  rest_utils  ${URL_PREFIX}

*** Keywords ***

########## GENERIC RESOURCE MANAGEMENT ##########    

check_resource_exists  [Arguments]  ${resource}  ${object}
    [Documentation]  check if there is any object to delete in a resource
    ${result} =  get_as_admin  ${OPENIDM_URL_PREFIX}${resource}/${object}/?_queryId=query-all-ids
    ${resource_does_exist} =    evaluate      ${result.status_code}==200
    [return]  ${resource_does_exist}
    
count_objects_in_resource
    [Arguments]  ${resource}  ${object}
    ${json} =     get_url     ${resource}/${object}/?_queryId=query-all-ids
    ${results} =  Get From Dictionary  ${json}  result
    ${length} =   Get Length  ${results}
    [return]  ${length} 
    
get_id_of_resource  [Arguments]  ${resource}  ${object}
    [Documentation]  get the list of id of a given object type in a resource 
    ${id_list} =        Create List
    ${json} =           get_url    ${resource}/${object}/?_queryId=query-all-ids
    ${results} =        Get From Dictionary     ${json}  result
    ${nb_of_results} =  Get Length	    ${results}
    :FOR	${index}  IN RANGE	0	${nb_of_results}
    \       ${result} =  Get From List  ${results}  ${index}
    \       ${id} =   Get From Dictionary  ${result}      _id
    \       Append to list  ${id_list}  ${id}
    [return]  ${id_list}

get_first_id_of_resource  [Arguments]  ${resource}  ${object}
    @{ids} =  get_id_of_resource  ${resource}  ${object} 
    [return]  @{ids}[0]

clean_resource  [Arguments]  ${resource}  ${object} 
   [Documentation]  delete object one by one using their id
    @{ids_of_objects} =    get_id_of_resource   ${resource}  ${object}
    ${number_of_users} =  get length  ${ids_of_objects}    
    :FOR	${id_of_object}	 IN  @{ids_of_objects}
    \       delete_as_admin  ${OPENIDM_URL_PREFIX}${resource}/${object}/${id_of_object}
    \       # we don't check if the delete is successful of not
    \       # it could return 404 sometimes if the user was in the process of beeing deleted
    ${log_msg} =  catenate  cleaned  ${number_of_users}  users from  ${resource}  ${object}
    log  ${log_msg}    
    

########## CHECK URL REST RETURN CODE ##########

get_url_and_expect_200 
    [Arguments]  ${url}  
    ${result} =  get_as_admin  ${OPENIDM_URL_PREFIX}${url}
    ${error_message} =  Catenate  SEPARATOR=  URL "  ${url}  " should return status "200" but returned "  ${result.status_code}  "
    should be equal  ${result.status_code}  ${200}  ${error_message}  values=false

get_full_url_and_expect_200 
    [Arguments]  ${url}  
    ${result} =  get_as_admin  ${url}
    ${error_message} =  Catenate  SEPARATOR=  URL "  ${url}  " should return status "200" but returned "  ${result.status_code}  "
    should be equal  ${result.status_code}  ${200}  ${error_message}  values=false
    
get_url_and_expect_404  
    [Arguments]  ${url}       
    ${result} =  get_as_admin  ${OPENIDM_URL_PREFIX}${url}
    ${error_message} =  Catenate  SEPARATOR=  URL "  ${url}  " should return status "404" but returned "  ${result.status_code}  "
    should be equal  ${result.status_code}  ${404}  ${error_message}  values=false   
 
post_url_and_expect_4xx
    [Arguments]  ${url}  ${data}={}
    ${result} =  post_as_admin  ${OPENIDM_URL_PREFIX}${url}  ${data}
    ${status_code} =  Convert To String  ${result.status_code}
    Should Match  ${status_code}  4?? 
 
########## HEADERS ##########    
    
create_headers_anonymous    
    ${result} =  Create Dictionary  X-OpenIDM-Username  anonymous  X-OpenIDM-Password  anonymous
    [return]  ${result}
    
create_headers_admin
    ${result} =  Create Dictionary  X-OpenIDM-Username  openidm-admin  X-OpenIDM-Password  openidm-admin
    [return]  ${result}    
    
########## CONFIGURATION ##########    
    
configure_jaspi
    [Arguments]  ${CONFIG_FILE}
    ${CONFIG_DATA}  Get File  ${CONFIG_FILE}
    put_url  configure  ${CONFIG_DATA}

update_configuration  
    [Arguments]  ${CONFIG_NAME}  ${CONFIG_FILE}  ${OLD_STRING}  ${NEW_STRING}          
    ${CONFIG_DATA}  Get File  ${CONFIG_FILE}
    ${CONFIG_DATA} =  Replace_String  ${CONFIG_DATA}  ${OLD_STRING}  ${NEW_STRING}
    put_url  config/${CONFIG_NAME}  ${CONFIG_DATA}

update_configuration_with_json  
    [Arguments]  ${CONFIG_NAME}  ${CONFIG_JSON}
    ${CONFIG_DATA} =    json_to_string  ${CONFIG_JSON}   
    put_url  config/${CONFIG_NAME}  ${CONFIG_DATA}

refresh_configuration  
    [Arguments]  ${CONFIG_NAME}
    ${CONFIG_JSON} =  get_url     config/${CONFIG_NAME}
    ${CONFIG_DATA} =  json_to_string  ${CONFIG_JSON}   
    put_url  config/${CONFIG_NAME}  ${CONFIG_DATA}
    
load_configuration  
    [Arguments]  ${CONFIG_NAME}  ${CONFIG_FILE}
    ${CONFIG_DATA}  Get File  ${CONFIG_FILE}
    put_url  config/${CONFIG_NAME}  ${CONFIG_DATA}
             
backup_conf_directory
    copy directory  ${OPENIDMDIR}/conf  ${BACKUP_CONF_DIR}
    
backup_sample1_conf_directory
    copy directory  ${OPENIDMDIR}/samples/sample1/conf  ${BACKUP_CONF_DIR_SAMPLE1}

backup_sample1_data_directory
    copy directory  ${OPENIDMDIR}/samples/sample1/data  ${BACKUP_DATA_DIR_SAMPLE1}

backup_sample2_conf_directory
    copy directory  ${OPENIDMDIR}/samples/sample2/conf  ${BACKUP_CONF_DIR_SAMPLE2}
    
restore_conf_directory
    Wait until keyword succeeds  5  1  remove directory  ${OPENIDMDIR}/conf  recursive=True
    copy directory  ${BACKUP_CONF_DIR}  ${OPENIDMDIR}/conf
    Wait until keyword succeeds  5  1  remove directory  ${BACKUP_CONF_DIR}  recursive=True
    
restore_sync_sample1_from_backup_sample1_directory
    copy file  ${BACKUP_CONF_DIR_SAMPLE1}/sync.json  ${SYNC_CONFIG_FILE_SAMPLE1}
    load_configuration  sync  ${SYNC_CONFIG_FILE_SAMPLE1}
    Wait until keyword succeeds  5  1  remove directory  ${BACKUP_CONF_DIR_SAMPLE1}  recursive=True          

restore_xml_sample1_from_backup_sample1_directory
    copy file  ${BACKUP_DATA_DIR_SAMPLE1}/xmlConnectorData.xml  ${OPENIDMDIR}/samples/sample1/data/xmlConnectorData.xml
    Wait until keyword succeeds  5  1  remove directory  ${BACKUP_DATA_DIR_SAMPLE1}  recursive=True     

restore_sync_sample2_from_backup_sample2_directory
    copy file  ${BACKUP_CONF_DIR_SAMPLE2}/sync.json  ${SYNC_CONFIG_FILE_SAMPLE2}
    load_configuration  sync  ${SYNC_CONFIG_FILE_SAMPLE2}
    Wait until keyword succeeds  5  1  remove directory  ${BACKUP_CONF_DIR_SAMPLE2}  recursive=True          

restore_sync_policy_sample2_from_backup_sample2_directory
    copy file  ${BACKUP_CONF_DIR_SAMPLE2}/sync.json  ${SYNC_CONFIG_FILE_SAMPLE2}
    load_configuration  sync  ${SYNC_CONFIG_FILE_SAMPLE2}
    copy file  ${BACKUP_CONF_DIR_SAMPLE2}/policy.json  ${POLICY_CONFIG_FILE_SAMPLE2}
    load_configuration  policy  ${POLICY_CONFIG_FILE_SAMPLE2}
    Wait until keyword succeeds  5  1  remove directory  ${BACKUP_CONF_DIR_SAMPLE2}  recursive=True    
        