<?xml version="1.0" encoding="UTF-8"?>
<!--
  The contents of this file are subject to the terms of the Common Development and
  Distribution License (the License). You may not use this file except in compliance with the
  License.

  You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
  specific language governing permission and limitations under the License.

  When distributing Covered Software, include this CDDL Header Notice in each file and include
  the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
  Header, with the fields enclosed by brackets [] replaced by your own identifying
  information: "Portions Copyrighted [year] [name of copyright owner]".

  Copyright 2012 ForgeRock AS. All rights reserved.
-->
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">

  <!-- Require a new line at the end of all source files. This was more of a
       requirement from CVS, but since some editors add one automatically we
       should require it anyway in order to avoid obfuscated diffs -->
  <module name="NewlineAtEndOfFile" />
  
  <!-- Disallow all tab characters. Tabs are bad bad bad -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true" />
  </module>
  
  <!-- Disallow trailing white space since some editors remove it automatically
       resulting in obfuscated diffs -->
  <module name="RegexpSingleline">
    <property name="format" value="\s+$" />
    <property name="message" value="Line has trailing spaces." />
  </module>
  
  <!--  Use header file template passed in from Maven -->
  <module name="RegexpHeader">
    <property name="headerFile" value="${checkstyle.header.file}" />
  </module>

  <module name="TreeWalker">
  
    <!-- Enable result caching -->
    <property name="cacheFile" value="${checkstyle.cache.file}" />

    <!-- 
    
        JAVADOC COMMENTS
    
    -->

    <!--  Require Javadoc for public classes only -->
    <module name="JavadocType">
      <property name="scope" value="public" />
    </module>
    
    <!--  Require valid Javadoc for public test methods. We only want a summary,
          so allow missing param, throws, returns tags. -->
    <module name="JavadocMethod">
      <property name="scope" value="public" />
      <property name="allowMissingParamTags" value="true" />
      <property name="allowMissingThrowsTags" value="true" />
      <property name="allowMissingReturnTag" value="true" />
      <property name="allowUndeclaredRTE" value="true" />
      <property name="allowThrowsTagsForSubclasses" value="true" />
    </module>
    
    <!--
    
        NAMING CONVENTIONS
    
    -->
    
    <!--  Constrain generic type parameter names -->
    <module name="ClassTypeParameterName">
      <property name="format" value="^[A-Z][0-9]*$" />
    </module>
    
    <!--  As per Sun conventions -->
    <module name="ConstantName" />
    <module name="LocalFinalVariableName" />
    <module name="LocalVariableName" />
    <module name="MemberName" />
    <module name="MethodName" />
    <module name="MethodTypeParameterName" />
    <module name="PackageName" />
    <module name="ParameterName" />
    <module name="StaticVariableName" />
    <module name="TypeName" />
    
    <!--
    
        IMPORTS
    
    -->
    
    <!-- Unlike Sun conventions, allow wild-card static imports -->
    <module name="AvoidStarImport">
      <property name="allowStaticMemberImports" value="true" />
    </module>
    
    <!--  As per Sun conventions -->
    <module name="IllegalImport" />
    <module name="RedundantImport" />
    <module name="UnusedImports" />

    <!--
    
        SIZE VIOLATIONS
    
    -->
    
    <!--  Restrict classes to one per file -->
    <module name="OuterTypeNumber" />
    
    <!--
    
        CODING
    
    -->

    <!--  As per Sun conventions -->
    <module name="EmptyStatement" />
    <module name="EqualsHashCode" />    
    <module name="IllegalInstantiation" />
    <module name="InnerAssignment" />
    <module name="SimplifyBooleanExpression" />
    <module name="SimplifyBooleanReturn" />
    
    <!--  Additional checks -->
    
    <!--  String literal equality is never an optimization since the
          String.equals() will check for this and will be inlined -->
    <module name="StringLiteralEquality" />
    <!-- Check package name is present and matches directory name as well -->
    <module name="PackageDeclaration" />
    
    <!--
    
        MISC
    
    -->

    <module name="UpperEll" />

    <!--  Require 4 character indent -->
    <module name="Indentation">
      <property name="caseIndent" value="0" />
    </module>
    
    <!--  Require that file name corresponds to class name -->
    <module name="OuterTypeFilename" />

  </module>
</module>
